sccmysql> use cdac;
Database changed
mysql> create table salespeople(snum int primary key,sname varchar(50),city varchar(50),comm float);
Query OK, 0 rows affected (0.17 sec)

mysql> insert into salespeople (snum,sname,city,comm) values
    -> (1001, 'Peel', 'London', 0.12),
    -> (1002, 'Serres', 'San Jose', 0.13),
    -> (1004, 'Motika', 'London', 0.11),
    -> (1007, 'Rifkin', 'Barcelona', 0.15),
    -> (1003, 'AxelRod', 'New York', 0.10),
    -> (1005, 'Fran', 'London', 0.26);
Query OK, 6 rows affected (0.02 sec)
Records: 6  Duplicates: 0  Warnings: 0
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| snum  | int         | NO   | PRI | NULL    |       |
| sname | varchar(50) | YES  |     | NULL    |       |
| city  | varchar(50) | YES  |     | NULL    |       |
| comm  | float       | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
4 rows in set (0.07 sec)

mysql> select * from salespeople;
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    | 0.12 |
| 1002 | Serres  | San Jose  | 0.13 |
| 1003 | AxelRod | New York  |  0.1 |
| 1004 | Motika  | London    | 0.11 |
| 1005 | Fran    | London    | 0.26 |
| 1007 | Rifkin  | Barcelona | 0.15 |
+------+---------+-----------+------+
6 rows in set (0.00 sec)

mysql> create table customers(cnum int primary key,cname varchar(50),city varchar(50),
    -> rating int,snum int, foreign key (snum) references salespeople(snum));
Query OK, 0 rows affected (0.13 sec)

mysql> INSERT INTO Customers (CNUM, CNAME, CITY, RATING, SNUM) VALUES
    -> (2001, 'Hoffman', 'London', 100, 1001),
    -> (2002, 'Giovanni', 'Rome', 200, 1003),
    -> (2003, 'Liu', 'San Jose', 200, 1002),
    -> (2004, 'Grass', 'Berlin', 300, 1002),
    -> (2006, 'Clemens', 'London', 100, 1001),
    -> (2008, 'Cisneros', 'San Jose', 300, 1007),
    -> (2007, 'Pereira', 'Rome', 100, 1004);
Query OK, 7 rows affected (0.08 sec)
Records: 7  Duplicates: 0  Warnings: 0

mysql> select * from customers;
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    200 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2007 | Pereira  | Rome     |    100 | 1004 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
7 rows in set (0.00 sec)
mysql> create table orders(onum int primary key,amt float,odate date,cnum int,snum int,
    -> FOREIGN KEY (CNUM) REFERENCES Customers(CNUM),
    ->     FOREIGN KEY (SNUM) REFERENCES Salespeople(SNUM)
    -> );
Query OK, 0 rows affected (0.12 sec)
w
mysql> select * from tabel orders;
ERROR 1146 (42S02): Table 'cdac.tabel' doesn't exist
mysql> INSERT INTO Orders (ONUM, AMT, ODATE, CNUM, SNUM) VALUES
    -> (3001, 18.69, '1996-10-03', 2008, 1007),
    -> (3003, 767.19, '1996-10-03', 2001, 1001),
    -> (3002, 1900.10, '1996-10-03', 2007, 1004),
    -> (3005, 5160.45, '1996-10-03', 2003, 1002),
    -> (3006, 1098.16, '1996-10-03', 2008, 1007),
    -> (3009, 1713.23, '1996-10-04', 2002, 1003),
    -> (3007, 75.75, '1996-10-04', 2002, 1003),
    -> (3008, 4723.00, '1996-10-05', 2006, 1001),
    -> (3010, 1309.95, '1996-10-06', 2004, 1002),
    -> (3011, 9891.88, '1996-10-06', 2006, 1001);
Query OK, 10 rows affected (0.08 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql> select * from orders;
+------+---------+------------+------+------+
| onum | amt     | odate      | cnum | snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1996-10-03 | 2008 | 1007 |
| 3002 |  1900.1 | 1996-10-03 | 2007 | 1004 |
| 3003 |  767.19 | 1996-10-03 | 2001 | 1001 |
| 3005 | 5160.45 | 1996-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1996-10-03 | 2008 | 1007 |
| 3007 |   75.75 | 1996-10-04 | 2002 | 1003 |
| 3008 |    4723 | 1996-10-05 | 2006 | 1001 |
| 3009 | 1713.23 | 1996-10-04 | 2002 | 1003 |
| 3010 | 1309.95 | 1996-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1996-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
10 rows in set (0.00 sec)


1. List all the columns of the Salespeople table.

mysql> show columns from salespeople;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| snum  | int         | NO   | PRI | NULL    |       |
| sname | varchar(50) | YES  |     | NULL    |       |
| city  | varchar(50) | YES  |     | NULL    |       |
| comm  | float       | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

2. List all customers with a rating of 100. 
mysql> select * from customers where rating = 100;
+------+---------+--------+--------+------+
| cnum | cname   | city   | rating | snum |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
| 2007 | Pereira | Rome   |    100 | 1004 |
+------+---------+--------+--------+------+
3 rows in set (0.00 sec)

3. Find all records in the Customer table with NULL values in the city column. 
mysql> select * from customers where city is null;
Empty set (0.00 sec)

4. Find the largest order taken by each salesperson on each date. 
mysql> SELECT S.SNUM, ODATE, MAX(AMT) AS MAX_ORDER_AMOUNT
    -> FROM Orders O
    -> JOIN Salespeople S ON O.SNUM = S.SNUM
    -> GROUP BY S.SNUM, ODATE;
+------+------------+------------------+
| SNUM | ODATE      | MAX_ORDER_AMOUNT |
+------+------------+------------------+
| 1001 | 1996-10-03 |           767.19 |
| 1001 | 1996-10-05 |             4723 |
| 1001 | 1996-10-06 |          9891.88 |
| 1002 | 1996-10-03 |          5160.45 |
| 1002 | 1996-10-06 |          1309.95 |
| 1003 | 1996-10-04 |          1713.23 |
| 1004 | 1996-10-03 |           1900.1 |
| 1007 | 1996-10-03 |          1098.16 |
+------+------------+------------------+
8 rows in set (0.00
mysql> select * from ( select odate,sname,onum,amt,
    -> row_number() over(partition by odate,sname order by amt desc) rn
    -> from salespeople s join orders o on s.snum=o.snum) as t
    -> where rn=1;
+------------+---------+------+---------+----+
| odate      | sname   | onum | amt     | rn |
+------------+---------+------+---------+----+
| 1996-10-03 | Motika  | 3002 |  1900.1 |  1 |c
| 1996-10-03 | Peel    | 3003 |  767.19 |  1 |
| 1996-10-03 | Rifkin  | 3006 | 1098.16 |  1 |
| 1996-10-03 | Serres  | 3005 | 5160.45 |  1 |
| 1996-10-04 | AxelRod | 3009 | 1713.23 |  1 |
| 1996-10-05 | Peel    | 3008 |    4723 |  1 |
| 1996-10-06 | Peel    | 3011 | 9891.88 |  1 |
| 1996-10-06 | Serres  | 3010 | 1309.95 |  1 |
+------------+---------+------+---------+----+
8 rows in set (0.09 sec)

5. Arrange the Orders table by descending customer number.

mysql> select * from orders order by cnum desc;
+------+---------+------------+------+------+
| onum | amt     | odate      | cnum | snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1996-10-03 | 2008 | 1007 |
| 3006 | 1098.16 | 1996-10-03 | 2008 | 1007 |
| 3002 |  1900.1 | 1996-10-03 | 2007 | 1004 |
| 3008 |    4723 | 1996-10-05 | 2006 | 1001 |
| 3011 | 9891.88 | 1996-10-06 | 2006 | 1001 |
| 3010 | 1309.95 | 1996-10-06 | 2004 | 1002 |
| 3005 | 5160.45 | 1996-10-03 | 2003 | 1002 |
| 3007 |   75.75 | 1996-10-04 | 2002 | 1003 |
| 3009 | 1713.23 | 1996-10-04 | 2002 | 1003 |
| 3003 |  767.19 | 1996-10-03 | 2001 | 1001 |
+------+---------+------------+------+------+
10 rows in set (0.00 sec)

6. Find which salespeople currently have orders in the Orders table. 
mysql> SELECT DISTINCT S.SNUM, S.SNAME
    -> FROM Salespeople S
    -> INNER JOIN Orders O ON S.SNUM = O.SNUM;
+------+---------+
| SNUM | SNAME   |
+------+---------+
| 1001 | Peel    |
| 1002 | Serres  |
| 1003 | AxelRod |
| 1004 | Motika  |
| 1007 | Rifkin  |
+------+---------+
5 rows in set (0.00 sec)

7. List names of all customers matched with the salespeople serving them. 
mysql> SELECT C.CNAME AS CustomerName, S.SNAME AS SalespersonName
    -> FROM Customers C
    -> INNER JOIN Salespeople S ON C.SNUM = S.SNUM;
+--------------+-----------------+
| CustomerName | SalespersonName |
+--------------+-----------------+
| Hoffman      | Peel            |
| Giovanni     | AxelRod         |
| Liu          | Serres          |
| Grass        | Serres          |
| Clemens      | Peel            |
| Pereira      | Motika          |
| Cisneros     | Rifkin          |
+--------------+-----------------+
7 rows in set (0.00 sec) 

8. Find the names and numbers of all salespeople who had more than one customer. 

mysql> select s.sname,s.snum from salespeople s where exists(select 1 from customers
 c where c.snum=s.snum having count(*)>1);
+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+
2 rows in set (0.07 sec)

//sir
mysql> select s.sname,s.snum from salespeople s, customers c where
 s.snum=c.snum group by s.sname,s.snum having count(distinct cnum)>1;
+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+
2 rows in set (0.07 sec)

9. Count the orders of each of the salespeople and output the results in descending order. 
mysql> select s.snum,s.sname,count(o.onum) as ordercount
    -> from salespeople s left join orders o on s.snum =o.snum
    -> group by s.snum,s.snum
    -> order by ordercount desc;
+------+---------+------------+
| snum | sname   | ordercount |
+------+---------+------------+
| 1001 | Peel    |          3 |
| 1002 | Serres  |          2 |
| 1003 | AxelRod |          2 |
| 1007 | Rifkin  |          2 |
| 1004 | Motika  |          1 |
| 1005 | Fran    |          0 |
+------+---------+------------+
6 rows in set (0.07 sec)

10. List the Customer table if and only if one or more of the customers in the Customer table are 
located in San Jose.

mysql> SELECT *
    -> FROM Customers
    -> WHERE CITY = 'San Jose';
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
2 rows in set (0.07 sec)

//mysql> select * from customers c
    -> where exists(select 1 from customers where city='san jose');
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2001 | Hoffman  | London   |    100 | 1001 |
| 2002 | Giovanni | Rome     |    200 | 1003 |
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2007 | Pereira  | Rome     |    100 | 1004 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
7 rows in set (0.02 sec)
 
11. Match salespeople to customers according to what city they lived in. 
mysql> select c.cname as customername,s.sname as salespeoplename,s.city as salespeoplecity,c.city as customercity
    -> from salespeople s  join customers c on s.city=c.city;
+--------------+-----------------+-----------------+--------------+
| customername | salespeoplename | salespeoplecity | customercity |
+--------------+-----------------+-----------------+--------------+
| Hoffman      | Fran            | London          | London       |
| Hoffman      | Motika          | London          | London       |
| Hoffman      | Peel            | London          | London       |
| Liu          | Serres          | San Jose        | San Jose     |
| Clemens      | Fran            | London          | London       |
| Clemens      | Motika          | London          | London       |
| Clemens      | Peel            | London          | London       |
| Cisneros     | Serres          | San Jose        | San Jose     |
+--------------+-----------------+-----------------+--------------+
8 rows in set (0.07 sec)

 
12. Find the largest order taken by each salesperson.
mysql> select s.snum,max(amt) as maximum_amount
    -> from salespeople s
    -> join orders o on s.snum = o.snum
    -> group by s.snum,s.sname;
+------+----------------+
| snum | maximum_amount |
+------+----------------+
| 1007 |        1098.16 |
| 1004 |         1900.1 |
| 1001 |        9891.88 |
| 1002 |        5160.45 |
| 1003 |        1713.23 |
+------+----------------+
5 rows in set (0.00 sec)


 
13. Find customers in San Jose who have a rating above 200.
mysql> select * from customers where city ='san jose' and rating>200;
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
1 row in set (0.00 sec)

 
14. List the names and commissions of all salespeople in London.
mysql> select sname,comm from salespeople where city ='london';
+--------+------+
| sname  | comm |
+--------+------+
| Peel   | 0.12 |
| Motika | 0.11 |
| Fran   | 0.26 |
+--------+------+
3 rows in set (0.00 sec)
 
15. List all the orders of salesperson Motika from the Orders table.
mysql> select * from orders where snum=(select snum from salespeople where sname='motika');
+------+--------+------------+------+------+
| onum | amt    | odate      | cnum | snum |
+------+--------+------------+------+------+
| 3002 | 1900.1 | 1996-10-03 | 2007 | 1004 |
+------+--------+------------+------+------+
1 row in set (0.07 sec)

16. Find all customers with orders on October 3.
mysql> SELECT DISTINCT C.CNUM, C.CNAME
    -> FROM Customers C
    -> INNER JOIN Orders O ON C.CNUM = O.CNUM
    -> WHERE ODATE = '1996-10-03';
+------+----------+
| CNUM | CNAME    |
+------+----------+
| 2008 | Cisneros |
| 2007 | Pereira  |
| 2001 | Hoffman  |
| 2003 | Liu      |
+------+----------+
4 rows in set (0.00 sec)


17. Give the sums of the amounts from the Orders table, grouped by date, eliminating all those 
dates where the SUM was not at least 2000.00 above the MAX amount.

mysql> select odate,sum(amt),max(amt) from orders group by odate having sum(amt)>= 2000+max(amt);
+------------+-------------------+----------+
| odate      | sum(amt)          | max(amt) |
+------------+-------------------+----------+
| 1996-10-03 | 8944.590208053589 |  5160.45 |
+------------+-------------------+----------+
1 row in set (0.07 sec)
 
18. Select all orders that had amounts that were greater than at least one of the orders from 
October 6.
mysql> SELECT *
    -> FROM Orders
    -> WHERE AMT > ANY (
    ->     SELECT AMT
    ->     FROM Orders
    ->     WHERE ODATE = '1996-10-06'
    -> );
+------+---------+------------+------+------+
| onum | amt     | odate      | cnum | snum |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1996-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1996-10-03 | 2003 | 1002 |
| 3008 |    4723 | 1996-10-05 | 2006 | 1001 |
| 3009 | 1713.23 | 1996-10-04 | 2002 | 1003 |
| 3011 | 9891.88 | 1996-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
5 rows in set (0.01 sec)

19. Write a query that uses the EXISTS operator to extract all salespeople who have customers 
with a rating of 300.
mysql> SELECT DISTINCT S.SNUM, S.SNAME
    -> FROM Salespeople S
    -> WHERE EXISTS (
    ->     SELECT 1
    ->     FROM Customers C
    ->     WHERE C.SNUM = S.SNUM
    ->     AND C.RATING = 300
    -> );
+------+--------+
| SNUM | SNAME  |
+------+--------+
| 1002 | Serres |
| 1007 | Rifkin |
+------+--------+
2 rows in set (0.07 sec)

20. Find all pairs of customers having the same rating.

mysql> select c1.cname c1,c2.cname c2,c1.ratin),c2.rating from customers c1 ,customers c2 where c1.cname<c2.cname and c1.rating=c2.rating;
+----------+---------+--------+--------+
| c1       | c2      | rating | rating |
+----------+---------+--------+--------+
| Clemens  | Hoffman |    100 |    100 |
| Giovanni | Liu     |    200 |    200 |
| Cisneros | Grass   |    300 |    300 |
| Clemens  | Pereira |    100 |    100 |
| Hoffman  | Pereira |    100 |    100 |
+----------+---------+--------+--------+
5 rows in set (0.00 sec)
 
21. Find all customers whose CNUM is 1000 above the SNUM of Serres.
mysql>  select * from customers where cnum>1000+(select snum from salespeople where sname='serres');
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2007 | Pereira  | Rome     |    100 | 1004 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
5 rows in set (0.07 sec)

// for understanding
mysql> select snum from salespeople where sname='serres';
+------+
| snum |
+------+
| 1002 |
+------+
1 row in set (0.00 sec)

 
22. Give the salespeople’s commissions as percentages instead of decimal numbers.
mysql> select sname,concat(round(comm*100,2),'%') comm_percent from salespeople;
+---------+--------------+
| sname   | comm_percent |
+---------+--------------+
| Peel    | 12%          |
| Serres  | 13%          |
| AxelRod | 10%          |
| Motika  | 11%          |
| Fran    | 26%          |
| Rifkin  | 15%          |
+---------+--------------+
6 rows in set (0.07 sec)
 
23. Find the largest order taken by each salesperson on each date, eliminating those MAX orders 
which are less than $3000.00 in value. 

mysql> SELECT o.snum, s.sname, o.odate, MAX(o.amt) AS max_order
    -> FROM orders o
    -> JOIN salespeople s ON o.snum = s.snum
    -> GROUP BY o.snum, s.sname, o.odate
    -> HAVING MAX(o.amt) >= 3000.00
    -> ORDER BY o.snum, o.odate;
+------+--------+------------+-----------+
| snum | sname  | odate      | max_order |
+------+--------+------------+-----------+
| 1001 | Peel   | 1996-10-05 |      4723 |
| 1001 | Peel   | 1996-10-06 |   9891.88 |
| 1002 | Serres | 1996-10-03 |   5160.45 |
+------+--------+------------+-----------+
3 rows in set (0.07 sec)

24. List the largest orders for October 3, for each salesperson.
mysql> SELECT S.SNUM, S.SNAME, O.ONUM, O.AMT AS LargestOrderAmount, O.ODATE
    -> FROM Salespeople S
    -> JOIN Orders O ON S.SNUM = O.SNUM
    -> WHERE O.ODATE = '1996-10-03'
    -> AND O.AMT = (
    ->     SELECT MAX(AMT)
    ->     FROM Orders
    ->     WHERE ODATE = '1996-10-03'
    ->     AND SNUM = S.SNUM
    -> );
+------+--------+------+--------------------+------------+
| SNUM | SNAME  | ONUM | LargestOrderAmount | ODATE      |
+------+--------+------+--------------------+------------+
| 1004 | Motika | 3002 |             1900.1 | 1996-10-03 |
| 1001 | Peel   | 3003 |             767.19 | 1996-10-03 |
| 1002 | Serres | 3005 |            5160.45 | 1996-10-03 |
| 1007 | Rifkin | 3006 |            1098.16 | 1996-10-03 |
+------+--------+------+--------------------+------------+

25. Find all customers located in cities where Serres (SNUM 1002) has customers.

mysql> select * from customers where city in(select distinct city from customers where snum = 1002);
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2003 | Liu      | San Jose |    200 | 1002 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+

26. Select all customers with a rating above 200.00. 
mysql>  select * from customers where rating>200;
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
2 rows in set (0.00 sec)

27. Count the number of salespeople currently listing orders in the Orders table.

mysql> select count(distinct snum) from orders;
+----------------------+
| count(distinct snum) |
+----------------------+
|                    5 |
+----------------------+
1 row in set (0.07 sec) 

28. Write a query that produces all customers serviced by salespeople with a commission above 
12%. Output the customer’s name and the salesperson’s rate of commission.
mysql> select cname,sname,comm from salespeople s, customers c where c.snum=s.snum and comm*100>12;
+----------+--------+------+
| cname    | sname  | comm |
+----------+--------+------+
| Liu      | Serres | 0.13 |
| Grass    | Serres | 0.13 |
| Cisneros | Rifkin | 0.15 |
+----------+--------+------+
3 rows in set (0.00 sec)
 
29. Find salespeople who have multiple customers.

mysql> select s.snum,s.sname,count(c.cnum) as customer_count
    -> from salespeople s
    -> join customers c on s.snum = c.snum
    -> group by s.snum,s.sname
    -> having count(c.cnum)>1;
+------+--------+----------------+
| snum | sname  | customer_count |
+------+--------+----------------+
| 1001 | Peel   |              2 |
| 1002 | Serres |              2 |
+------+--------+----------------+
 
30. Find salespeople with customers located in their city. 

select distinct sname,cname,s.city from salespeople s,customers c where s.snum=c.snum and s.city=c.city;
+--------+---------+----------+
| sname  | cname   | city     |
+--------+---------+----------+
| Peel   | Hoffman | London   |
| Serres | Liu     | San Jose |
| Peel   | Clemens | London   |
+--------+---------+----------+

31. Find all salespeople whose name starts with ‘P’ and the fourth character is ‘l’. 

mysql> select * from salespeople where sname like 'p__l%';//put two underscore
+------+-------+--------+------+
| snum | sname | city   | comm |
+------+-------+--------+------+
| 1001 | Peel  | London | 0.12 |
+------+-------+--------+------+
1 row in set (0.00 sec)
                
32. Write a query that uses a subquery to obtain all orders for the customer named Cisneros. 
Assume you do not know his customer number. 

mysql> select * from orders
    -> where cnum =(select cnum from customers  where cname ='cisneros');
+------+---------+------------+------+------+
| onum | amt     | odate      | cnum | snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1996-10-03 | 2008 | 1007 |
| 3006 | 1098.16 | 1996-10-03 | 2008 | 1007 |
+------+---------+------------+------+------+
2 rows in set (0.07 sec)

33. Find the largest orders for Serres and Rifkin.
 
mysql> select s.sname,max(amt) as maximum_amount from salespeople s join
    -> orders o on o.snum=s.snum
    -> where s.sname in ('serres','rifkin')
    -> group by s.sname;
+--------+----------------+
| sname  | maximum_amount |
+--------+----------------+
| Serres |        5160.45 |
| Rifkin |        1098.16 |
+--------+----------------+
34. Extract the Salespeople table in the following order : SNUM, SNAME, COMMISSION, CITY.

mysql> select snum,sname,comm as commission,city
    -> from salespeople;
+------+---------+------------+-----------+
| snum | sname   | commission | city      |
+------+---------+------------+-----------+
| 1001 | Peel    |       0.12 | London    |
| 1002 | Serres  |       0.13 | San Jose  |
| 1003 | AxelRod |        0.1 | New York  |
| 1004 | Motika  |       0.11 | London    |
| 1005 | Fran    |       0.26 | London    |
| 1007 | Rifkin  |       0.15 | Barcelona |
+------+---------+------------+-----------+
 
35. Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range.
mysql> select * from customers
    -> where cname >='A' and cname <='H';
+------+----------+----------+--------+------+
| cnum | cname    | city     | rating | snum |
+------+----------+----------+--------+------+
| 2002 | Giovanni | Rome     |    200 | 1003 |
| 2004 | Grass    | Berlin   |    300 | 1002 |
| 2006 | Clemens  | London   |    100 | 1001 |
| 2008 | Cisneros | San Jose |    300 | 1007 |
+------+----------+----------+--------+------+
4 rows in set (0.00 sec)

36. Select all the possible combinations of customers that you can assign. 

mysql> select cname,onum,odate from customers c cross join orders o on c.snum = o.snum;

mysql> select c1.cname c1,c2.cname c2,c1.rating,c2.rating from customers c1 ,customers c2 where c1.cname<c2.cname;
+----------+----------+--------+--------+
| c1       | c2       | rating | rating |
+----------+----------+--------+--------+
| Cisneros | Hoffman  |    300 |    100 |
| Clemens  | Hoffman  |    100 |    100 |
| Grass    | Hoffman  |    300 |    100 |
| Giovanni | Hoffman  |    200 |    100 |
| Cisneros | Giovanni |    300 |    200 |
| Clemens  | Giovanni |    100 |    200 |
| Cisneros | Liu      |    300 |    200 |
| Clemens  | Liu      |    100 |    200 |
| Grass    | Liu      |    300 |    200 |
| Giovanni | Liu      |    200 |    200 |
| Hoffman  | Liu      |    100 |    200 |
| Cisneros | Grass    |    300 |    300 |
| Clemens  | Grass    |    100 |    300 |
| Giovanni | Grass    |    200 |    300 |
| Cisneros | Clemens  |    300 |    100 |
| Cisneros | Pereira  |    300 |    100 |
| Clemens  | Pereira  |    100 |    100 |
| Grass    | Pereira  |    300 |    100 |
| Liu      | Pereira  |    200 |    100 |
| Giovanni | Pereira  |    200 |    100 |
| Hoffman  | Pereira  |    100 |    100 |
+----------+----------+--------+--------+
21 rows in set (0.00 sec)
37. Select all orders that are greater than the average for October 4. 
mysql> select * from orders
    -> where amt >( select avg(amt) from orders
    -> where odate ='1996-10-04');
+------+---------+------------+------+------+
| onum | amt     | odate      | cnum | snum |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1996-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1996-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1996-10-03 | 2008 | 1007 |
| 3008 |    4723 | 1996-10-05 | 2006 | 1001 |
| 3009 | 1713.23 | 1996-10-04 | 2002 | 1003 |
| 3010 | 1309.95 | 1996-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1996-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
7 rows in set (0.07 sec)

38. Write a select command using a corelated subquery that selects the names and numbers of all 
customers with ratings equal to the maximum for their city. 

mysql> select cname,cnum from customers c1
    -> where rating =(select max(rating)
    -> from customers c2
    -> where c2.city = c1.city);
+----------+------+
| cname    | cnum |
+----------+------+
| Hoffman  | 2001 |
| Giovanni | 2002 |
| Grass    | 2004 |
| Clemens  | 2006 |
| Cisneros | 2008 |
+----------+------+

39. Write a query that totals the orders for each day and places the results in descending order. 

mysql> select odate ,sum(amt) as total_orders
    -> from orders
    -> group by odate
    -> order by total_orders desc;
+------------+--------------------+
| odate      | total_orders       |
+------------+--------------------+
| 1996-10-06 | 11201.829833984375 |
| 1996-10-03 |  8944.590208053589 |
| 1996-10-05 |               4723 |
| 1996-10-04 |   1788.97998046875 |
+------------+--------------------+

40. Write a select command that produces the rating followed by the name of each customer in 
San Jose.
mysql> select rating ,cname
    -> from customers
    -> where city ='san jose';
+--------+----------+
| rating | cname    |
+--------+----------+
|    200 | Liu      |
|    300 | Cisneros |
+--------+----------+
 
41. Find all orders with amounts smaller than any amount for a customer in San Jose. 

mysql> select * from orders where amt<any(select amt from orders o,customers c where o.cnum=c.cnum and city='san jose');
+------+---------+------------+------+------+
| onum | amt     | odate      | cnum | snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1996-10-03 | 2008 | 1007 |
| 3002 |  1900.1 | 1996-10-03 | 2007 | 1004 |
| 3003 |  767.19 | 1996-10-03 | 2001 | 1001 |
| 3006 | 1098.16 | 1996-10-03 | 2008 | 1007 |
| 3007 |   75.75 | 1996-10-04 | 2002 | 1003 |
| 3008 |    4723 | 1996-10-05 | 2006 | 1001 |
| 3009 | 1713.23 | 1996-10-04 | 2002 | 1003 |
| 3010 | 1309.95 | 1996-10-06 | 2004 | 1002 |
+------+---------+------------+------+------+
8 rows in set (0.07 sec)

42. Find all orders with above average amounts for their customers. 
mysql> select o.onum,o.amt,o.odate,o.cnum,o.snum from orders o
    -> where o.amt >( select avg(o2.amt) from orders o2 where o2.cnum=o.cnum);
+------+---------+------------+------+------+
| onum | amt     | odate      | cnum | snum |
+------+---------+------------+------+------+
| 3006 | 1098.16 | 1996-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1996-10-04 | 2002 | 1003 |
| 3011 | 9891.88 | 1996-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
43. Write a query that selects the highest rating in each city. 
mysql> select city,max(rating) as maximumm_rating
    -> from customers
    -> group by city;
+----------+-----------------+
| city     | maximumm_rating |
+----------+-----------------+
| London   |             100 |
| Rome     |             200 |
| San Jose |             300 |
| Berlin   |             300 |
+----------+-----------------+


44. Write a query that calculates the amount of the salesperson’s commission on each order by a 
customer with a rating above 100.00.

mysql> select sname,cname,rating,amt,comm,amt*comm comm_amt from orders o,customers c,salespeople s where o.cnum=c.cnum and o.snum=s.snum and rating>100;
+---------+----------+--------+---------+------+--------------------+
| sname   | cname    | rating | amt     | comm | comm_amt           |
+---------+----------+--------+---------+------+--------------------+
| AxelRod | Giovanni |    200 |   75.75 |  0.1 |  7.575000112876296 |
| AxelRod | Giovanni |    200 | 1713.23 |  0.1 |  171.3230005997866 |
| Serres  | Liu      |    200 | 5160.45 | 0.13 |  670.8585007836809 |
| Serres  | Grass    |    300 | 1309.95 | 0.13 | 170.29348740601563 |
| Rifkin  | Cisneros |    300 |   18.69 | 0.15 |  2.803500191509727 |
| Rifkin  | Cisneros |    300 | 1098.16 | 0.15 |   164.724011672497 |
+---------+----------+--------+---------+------+--------------------+
6 rows in set (0.00 sec)

mysql> select o.onum,o.amt,c.cname,s.sname,s.comm,(o.amt * s.comm) as commission_amount
    -> from orders o
    -> join customers c on o.cnum=c.cnum
    -> join salespeople s on o.snum=s.snum
    -> where c.rating > 100;
+------+---------+----------+---------+------+--------------------+
| onum | amt     | cname    | sname   | comm | commission_amount  |
+------+---------+----------+---------+------+--------------------+
| 3007 |   75.75 | Giovanni | AxelRod |  0.1 |  7.575000112876296 |
| 3009 | 1713.23 | Giovanni | AxelRod |  0.1 |  171.3230005997866 |
| 3005 | 5160.45 | Liu      | Serres  | 0.13 |  670.8585007836809 |
| 3010 | 1309.95 | Grass    | Serres  | 0.13 | 170.29348740601563 |
| 3001 |   18.69 | Cisneros | Rifkin  | 0.15 |  2.803500191509727 |
| 3006 | 1098.16 | Cisneros | Rifkin  | 0.15 |   164.724011672497 |
+------+---------+----------+---------+------+--------------------+
  
45. Count the customers with ratings above San Jose’s average.
mysql> select count(*) as customers_above_avg
    -> from customers
    -> where rating > (
    -> select avg(rating)
    -> from customers
    -> where city ='san jose');
+---------------------+
| customers_above_avg |
+---------------------+
|                   2 |
+---------------------+ 

46. Write a query that  produces all pairs of salespeople with themselves as well as duplicate rows 
with the order reversed.


47. Find all salespeople that are located in either Barcelona or London. 
mysql> select sname,city from salespeople where city in ('barcelona','london');
+--------+-----------+
| sname  | city      |
+--------+-----------+
| Peel   | London    |
| Motika | London    |
| Fran   | London    |
| Rifkin | Barcelona |
+--------+-----------+
48. Find all salespeople with only one customer. 
mysql> SELECT s.snum, s.sname, s.city, s.comm
    -> FROM salespeople s
    -> JOIN (
    ->     SELECT snum
    ->     FROM customers
    ->     GROUP BY snum
    ->     HAVING COUNT(*) = 1
    -> ) c ON s.snum = c.snum;
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1003 | AxelRod | New York  |  0.1 |
| 1004 | Motika  | London    | 0.11 |
| 1007 | Rifkin  | Barcelona | 0.15 |
+------+---------+-----------+------+
49. Write a query that joins the Customer table to itself to find all pairs of customers served by a 
single salesperson. 

50. Write a query that will give you all orders for more than $1000.00
mysql> select onum,snum,amt from orders
    -> having amt>1000.00;
+------+------+---------+
| onum | snum | amt     |
+------+------+---------+
| 3002 | 1004 |  1900.1 |
| 3005 | 1002 | 5160.45 |
| 3006 | 1007 | 1098.16 |
| 3008 | 1001 |    4723 |
| 3009 | 1003 | 1713.23 |
| 3010 | 1002 | 1309.95 |
| 3011 | 1001 | 9891.88 |
+------+------+---------+
51. Write a query that lists each order number followed by the name of the customer who made 
that order. 
mysql> select o.onum,c.cname from orders o
    -> join customers c on o.cnum = c.cnum;
+------+----------+
| onum | cname    |
+------+----------+
| 3003 | Hoffman  |
| 3007 | Giovanni |
| 3009 | Giovanni |
| 3005 | Liu      |
| 3010 | Grass    |
| 3008 | Clemens  |
| 3011 | Clemens  |
| 3002 | Pereira  |
| 3001 | Cisneros |
| 3006 | Cisneros |
+------+----------+

52. Write 2 queries that select all salespeople (by name and number) who have customers in their 
cities who they do not service, one using a join and one a corelated subquery. Which solution 
is more elegant?
 
mysql> select distinct s.sname,s.snum
    -> from salespeople s,customers c where
    -> s.snum!=c.snum
    -> and s.city=c.city;
+--------+------+
| sname  | snum |
+--------+------+
| Fran   | 1005 |
| Motika | 1004 |
| Serres | 1002 |
+--------+------+
3 rows in set (0.08 sec)

mysql> select s.sname,s.snum,s.city
    -> from salespeople s where exists (select 1 from customers c where s.snum!=c.snum
    -> and s.city=c.city);
+--------+------+----------+
| sname  | snum | city     |
+--------+------+----------+
| Serres | 1002 | San Jose |
| Motika | 1004 | London   |
| Fran   | 1005 | London   |
+--------+------+----------+
3 rows in set (0.00 sec)

53. Write a query that selects all customers whose ratings are equal to or greater than ANY (in the 
SQL sense) of Serres’? 
mysql> select c.cname,c.rating from customers c
    -> where c.rating >= any(select c2.rating from customers c2
    -> join salespeople s on c2.snum = s.snum
    -> where s.sname ='serres'
    -> );
+----------+--------+
| cname    | rating |
+----------+--------+
| Giovanni |    200 |
| Liu      |    200 |
| Grass    |    300 |
| Cisneros |    300 |
+----------+--------+

54. Write 2 queries that will produce all orders taken on October 3 or October 4. 
mysql> SELECT o.onum, o.odate
    -> FROM orders o
    -> WHERE o.odate IN ('1996-10-03', '1996-10-04');
+------+------------+
| onum | odate      |
+------+------------+
| 3001 | 1996-10-03 |
| 3002 | 1996-10-03 |
| 3003 | 1996-10-03 |
| 3005 | 1996-10-03 |
| 3006 | 1996-10-03 |
| 3007 | 1996-10-04 |
| 3009 | 1996-10-04 |
+------+------------+

55. Write a query that produces all pairs of orders by a given customer. Name that customer and 
eliminate duplicates.

mysql> select cname,o1.onum,o2.onum
    -> from orders o1,orders o2,customers c
    -> where o1.cnum=o2.cnum
    -> and o1.onum<o2.onum
    -> and o1.cnum=c.cnum;
+----------+------+------+
| cname    | onum | onum |
+----------+------+------+
| Giovanni | 3007 | 3009 |
| Clemens  | 3008 | 3011 |
| Cisneros | 3001 | 3006 |
+----------+------+------+
3 rows in set (0.07 sec)
 
56. Find only those customers whose ratings are higher than every customer in Rome.
mysql> select c.cnum,c.cname,c.rating,c.city
    -> from customers c
    -> where c.rating > (select max(c2.rating) from customers c2 where c2.city='Rome');
+------+----------+--------+----------+
| cnum | cname    | rating | city     |
+------+----------+--------+----------+
| 2004 | Grass    |    300 | Berlin   |
| 2008 | Cisneros |    300 | San Jose |
+------+----------+--------+----------+
 
57. Write a query on the Customers table whose output will exclude all customers with a rating <= 
100.00, unless they are located in Rome.

mysql> select c.cnum,c.cname,c.rating,c.city
    -> from customers c
    -> where c.rating > 100 and c.city ='Rome';
+------+----------+--------+------+
| cnum | cname    | rating | city |
+------+----------+--------+------+
| 2002 | Giovanni |    200 | Rome |
+------+----------+--------+------+
 
58. Find all rows from the Customers table for which the salesperson number is 1001. 
mysql> select * from customers where snum = 1001;
+------+---------+--------+--------+------+
| cnum | cname   | city   | rating | snum |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
+------+---------+--------+--------+------+

59. Find the total amount in Orders for each salesperson for whom this total is greater than the 
amount of the largest order in the table.
mysql> select s.snum,s.sname,sum(o.amt) as total_amount
    -> from salespeople s
    -> join orders o on s.snum = o.snum
    -> group by s.snum,s.sname
    -> having sum(o.amt)>(select max(amt) from orders);
+------+-------+--------------------+
| snum | sname | total_amount       |
+------+-------+--------------------+
| 1001 | Peel  | 15382.069885253906 |
+------+-------+--------------------+ 

60. Write a query that selects all orders save those with zeroes or NULLs in the amount field.

mysql> select * from orders where amt = 0 or amt is null;
Empty set (0.00 sec)

mysql> select * from orders where amt !=0;
+------+---------+------------+------+------+
| onum | amt     | odate      | cnum | snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1996-10-03 | 2008 | 1007 |
| 3002 |  1900.1 | 1996-10-03 | 2007 | 1004 |
| 3003 |  767.19 | 1996-10-03 | 2001 | 1001 |
| 3005 | 5160.45 | 1996-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1996-10-03 | 2008 | 1007 |
| 3007 |   75.75 | 1996-10-04 | 2002 | 1003 |
| 3008 |    4723 | 1996-10-05 | 2006 | 1001 |
| 3009 | 1713.23 | 1996-10-04 | 2002 | 1003 |
| 3010 | 1309.95 | 1996-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1996-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+
10 rows in set (0.00 sec)

61. Produce all combinations of salespeople and customer names such that the former precedes 
the latter alphabetically, and the latter has a rating of less than 200. 
mysql> select s.sname,c.cname from customers c join salespeople s on c.rating <200 and s.sname<c.cname;
+---------+---------+
| sname   | cname   |
+---------+---------+
| Peel    | Pereira |
| AxelRod | Pereira |
| AxelRod | Clemens |
| AxelRod | Hoffman |
| Motika  | Pereira |
| Fran    | Pereira |
| Fran    | Hoffman |
+---------+---------+
62. List all Salespeople’s names and the Commission they have earned.
mysql> SELECT sname AS Salesperson_Name,
    ->        comm * 100 AS Commission_Percentage
    -> FROM salespeople;
+------------------+-----------------------+
| Salesperson_Name | Commission_Percentage |
+------------------+-----------------------+
| Peel             |    11.999999731779099 |
| Serres           |    12.999999523162842 |
| AxelRod          |    10.000000149011612 |
| Motika           |    10.999999940395355 |
| Fran             |    25.999999046325684 |
| Rifkin           |    15.000000596046448 |
+------------------+-----------------------+
 
63. Write a query that produces the names and cities of all customers with the same rating as 
Hoffman. Write the query using Hoffman’s CNUM rather than his rating, so that it would still be 
usable if his rating changed.
mysql> select c.cname,c.city from customers c where rating=(select rating from customers where  cname='hoffman');
+---------+--------+
| cname   | city   |
+---------+--------+
| Hoffman | London |
| Clemens | London |
| Pereira | Rome   |
+---------+--------+

64. Find all salespeople for whom there are customers that follow them in alphabetical order.
mysql> select s.sname,s.snum from salespeople s
    -> join customers c on c.snum = s.snum
    -> where c.cname > s.sname;
+---------+------+
| sname   | snum |
+---------+------+
| AxelRod | 1003 |
| Motika  | 1004 |
+---------+------+  
65. Write a query that produces the names and ratings of all customers of all who have above 
average orders.

mysql> select cname,rating,avg(amt) from customers c, orders o
    -> where c.cnum=o.cnum
    -> group by cname,rating
    -> having avg(amt)
    -> >(select avg(amt) from orders);
+---------+--------+------------------+
| cname   | rating | avg(amt)         |
+---------+--------+------------------+
| Liu     |    200 |  5160.4501953125 |
| Clemens |    100 | 7307.43994140625 |
+---------+--------+------------------+
2 rows in set (0.07 sec)

 
66. Find the SUM of all purchases from the Orders table. 
mysql> select sum(amt) as total_purchases from orders;
+--------------------+
| total_purchases    |
+--------------------+
| 26658.400022506714 |
+--------------------+
67. Write a SELECT command that produces the order number, amount and date for all rows in 
the order table. 
mysql> select o.onum,o.amt,o.odate from orders o;
+------+---------+------------+
| onum | amt     | odate      |
+------+---------+------------+
| 3001 |   18.69 | 1996-10-03 |
| 3002 |  1900.1 | 1996-10-03 |
| 3003 |  767.19 | 1996-10-03 |
| 3005 | 5160.45 | 1996-10-03 |
| 3006 | 1098.16 | 1996-10-03 |
| 3007 |   75.75 | 1996-10-04 |
| 3008 |    4723 | 1996-10-05 |
| 3009 | 1713.23 | 1996-10-04 |
| 3010 | 1309.95 | 1996-10-06 |
| 3011 | 9891.88 | 1996-10-06 |
+------+---------+------------+
10 rows in set (0.00 sec)
68. Count the number of nonNULL rating fields in the Customers table (including repeats).
 mysql> select count(rating) as non_null_ratings from customers;
+------------------+
| non_null_ratings |
+------------------+
|                7 |
+------------------+
69. Write a query that gives the names of both the salesperson and the customer for each order 
after the order number.  
mysql> select o.onum,c.cname,s.sname from orders o join customers c on o.cnum = c.cnum
    -> join salespeople s on o.snum = s.snum;
+------+----------+---------+
| onum | cname    | sname   |
+------+----------+---------+
| 3003 | Hoffman  | Peel    |
| 3007 | Giovanni | AxelRod |
| 3009 | Giovanni | AxelRod |
| 3005 | Liu      | Serres  |
| 3010 | Grass    | Serres  |
| 3008 | Clemens  | Peel    |
| 3011 | Clemens  | Peel    |
| 3002 | Pereira  | Motika  |
| 3001 | Cisneros | Rifkin  |
| 3006 | Cisneros | Rifkin  |
+------+----------+---------+
10 rows in set (0.07 sec)
70. List the commissions of all salespeople servicing customers in London. 
mysql> select distinct s.sname ,s.comm
    -> from salespeople s
    -> join customers c on s.snum = c.snum
    -> where c.city ='london';
+-------+------+
| sname | comm |
+-------+------+
| Peel  | 0.12 |
+-------+------+

71. Write a query using ANY or ALL that will find all salespeople who have no customers located in 
their city. 
mysql> select s.snum,s.sname,s.city,s.comm
    -> from salespeople s
    -> where s.snum not in(
    -> select c.snum from customers c where c.city = s.city);
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1003 | AxelRod | New York  |  0.1 |
| 1004 | Motika  | London    | 0.11 |
| 1005 | Fran    | London    | 0.26 |
| 1007 | Rifkin  | Barcelona | 0.15 |
+------+---------+-----------+------+

72. Write a query using the EXISTS operator that selects all salespeople with customers located in 
their cities who are not assigned to them.
mysql> select s.sname,c.city from salespeople s
    -> join customers c on s.snum = c.snum
    -> where exists (select 1 from customers c where c.city = s.city and c.snum <> s.snum);
+--------+----------+
| sname  | city     |
+--------+----------+
| Serres | San Jose |
| Serres | Berlin   |
| Motika | Rome     |
+--------+----------+ 
73. Write a query that selects all customers serviced by Peel or Motika. (Hint : The SNUM field 
relates the two tables to one another.) 
mysql> select c.cname from customers c
    -> join salespeople s on s.snum = c.snum
    -> where s.sname in ('peel','motika');
+---------+
| cname   |
+---------+
| Hoffman |
| Clemens |
| Pereira |
+---------+

74. Count the number of salespeople registering orders for each day. (If a salesperson has more 
than one order on a given day, he or she should be counted only once.)
 
75. Find all orders attributed to salespeople in London. 
mysql> select o.onum,o.amt,o.odate from orders o
    -> join salespeople s on o.snum = s.snum
    -> where s.city ='london';
+------+---------+------------+
| onum | amt     | odate      |
+------+---------+------------+
| 3003 |  767.19 | 1996-10-03 |
| 3008 |    4723 | 1996-10-05 |
| 3011 | 9891.88 | 1996-10-06 |
| 3002 |  1900.1 | 1996-10-03 |
+------+---------+------------+

76. Find all orders by customers not located in the same cities as their salespeople. 
mysql> select o.onum from orders o
    -> join customers c on o.snum = c.snum
    -> join salespeople s on s.snum = o.snum
    -> where c.city <> s.city;
+------+
| onum |
+------+
| 3007 |
| 3009 |
| 3005 |
| 3010 |
| 3002 |
| 3001 |
| 3006 |
+------+

77. Find all salespeople who have customers with more than one current order. 
mysql> select distinct s.snum,s.sname
    -> from salespeople s
    -> join customers c on s.snum = c.snum
    -> join orders o on c.cnum = o.cnum
    -> where c.cnum in (
    -> select o.cnum from orders o group by o.cnum
    -> having count(o.onum)>1);
+------+---------+
| snum | sname   |
+------+---------+
| 1001 | Peel    |
| 1003 | AxelRod |
| 1007 | Rifkin  |
+------+---------+
78. Write a query that extracts from the Customers table every customer assigned to a 
salesperson who currently has at least one other customer (besides the customer being 
selected) with orders in the Orders table. 
79. Write a query that selects all customers whose names begin with ‘C’. 
80. Write a query on the Customers table that will find the highest rating in each city. Put the output 
in this form : for the city (city) the highest rating is : (rating). 
81. Write a query that will produce the SNUM values of all salespeople with orders currently in the 
Orders table (without any repeats). 
82. Write a query that lists customers in descending order of rating. Output the rating field first, 
followed by the customer’s names and numbers. 


83. Find the average commission for salespeople in London.
mysql> SELECT AVG(s.comm) AS Average_Commission
    -> FROM customers c
    -> JOIN salespeople s ON c.snum = s.snum
    -> WHERE c.city = 'London';
+---------------------+
| Average_Commission  |
+---------------------+
| 0.11999999731779099 |
+---------------------+ 

84. Find all orders credited to the same salesperson who services Hoffman (CNUM 2001). 
85. Find all salespeople whose commission is in between 0.10 and 0.12 (both inclusive).
mysql> SELECT *
    -> FROM salespeople
    -> WHERE comm >= 0.10 AND comm <= 0.12;
+------+---------+----------+------+
| snum | sname   | city     | comm |
+------+---------+----------+------+
| 1001 | Peel    | London   | 0.12 |
| 1003 | AxelRod | New York |  0.1 |
| 1004 | Motika  | London   | 0.11 |
+------+---------+----------+------+
3 rows in set (0.00 sec)

mysql> select * from salespeople
    -> where comm between 0.10 and 0.12;
+------+---------+----------+------+
| snum | sname   | city     | comm |
+------+---------+----------+------+
| 1001 | Peel    | London   | 0.12 |
| 1003 | AxelRod | New York |  0.1 |
| 1004 | Motika  | London   | 0.11 |
+------+---------+----------+------+
3 rows in set (0.00 sec) 
86. Write a query that will give you the names and cities of all salespeople in London with a 
commission above 0.10. 
mysql> SELECT s.sname AS Salesperson_Name, s.city AS City
    -> FROM salespeople s
    -> JOIN customers c ON s.snum = c.snum
    -> WHERE s.city = 'London' AND s.comm > 0.10;
+------------------+--------+
| Salesperson_Name | City   |
+------------------+--------+
| Peel             | London |
| Peel             | London |
| Motika           | London |
+------------------+--------+
87. What will be the output from the following query?      
SELECT * FROM ORDERS       
where (amt < 1000 OR NOT (odate = 10/03/1996 AND cnum > 
2003)); 
88. Write a query that selects each customer’s smallest order. 
89. Write a query that selects the first customer in alphabetical order whose name begins with G. 
mysql> SELECT *
    -> FROM customers
    -> WHERE cname = (
    ->     SELECT MIN(cname)
    ->     FROM customers
    ->     WHERE cname LIKE 'G%'
    -> );
+------+----------+------+--------+------+
| cnum | cname    | city | rating | snum |
+------+----------+------+--------+------+
| 2002 | Giovanni | Rome |    200 | 1003 |
+------+----------+------+--------+------+
90. Write a query that counts the number of different nonNULL city values in the Customers table.
 mysql> SELECT COUNT(DISTINCT city) from customers
    -> where city is not null;
+----------------------+
| COUNT(DISTINCT city) |
+----------------------+
|                    4 |
+----------------------+
1 row in set (0.00 sec)
91. Find the average amount from the Orders table. 
mysql> select avg(amt) from orders
    -> ;
+-------------------+
| avg(amt)          |
+-------------------+
| 2665.840002250671 |
+-------------------+

92. What would be the output from the following query?      
SELECT * FROM ORDERS       
WHERE NOT (odate = 10/03/96 OR snum > 1006) AND amt >= 
1500); 
93. Find all customers who are not located in San Jose and whose rating is above 200. 

mysql> select c.cname,c.city,c.rating from customers c
    -> where cname != 'san jose' and rating>200;
+----------+----------+--------+
| cname    | city     | rating |
+----------+----------+--------+
| Grass    | Berlin   |    300 |
| Cisneros | San Jose |    300 |
+----------+----------+--------+
94. Give a simpler way to write this query :       
SELECT snum, sname city, comm FROM salespeople  
WHERE (comm > + 0.12 OR comm < 0.14); 
95. Evaluate the following query : 
SELECT * FROM orders  
WHERE NOT ((odate = 10/03/96 AND snum > 1002) OR amt > 2000.00); 
96. Which salespersons attend to customers not in the city they have been assigned to? 

97. Which salespeople get commission greater than 0.11 are serving customers rated less than 
250? 
mysql> select distinct s.snum,s.sname,s.comm
    -> from salespeople s
    -> join customers c on s.snum = c.snum
    -> where s.comm >0.11 and c.rating < 250;
+------+--------+------+
| snum | sname  | comm |
+------+--------+------+
| 1001 | Peel   | 0.12 |
| 1002 | Serres | 0.13 |
+------+--------+------+

98. Which salespeople have been assigned to the same city but get different commission 
percentages? 
mysql> select s1.sname,s1.city,s1.comm
    -> from salespeople s1
    -> join(
    -> select city from salespeople group by city having count(Distinct comm)>1) s2 on s1.city=s2.city;
+--------+--------+------+
| sname  | city   | comm |
+--------+--------+------+
| Peel   | London | 0.12 |
| Motika | London | 0.11 |
| Fran   | London | 0.26 |
+--------+--------+------+

99. Which salesperson has earned the most by way of commission?
mysql> select s.snum,s.sname,s.comm, sum(o.amt*s.comm) as total_commission
    -> from salespeople s
    -> join orders o on s.snum = o.snum
    -> group by s.sname,s.snum,s.comm;
+------+---------+------+--------------------+
| snum | sname   | comm | total_commission   |
+------+---------+------+--------------------+
| 1007 | Rifkin  | 0.15 | 167.52751186400673 |
| 1004 | Motika  | 0.11 | 209.01099618190528 |
| 1001 | Peel    | 0.12 | 1845.8483449725422 |
| 1002 | Serres  | 0.13 |  841.1519881896966 |
| 1003 | AxelRod |  0.1 |  178.8980007126629 |
+------+---------+------+--------------------+ 
100.Does the customer who has placed the maximum number of orders have the maximum rating? 
101.Has the customer who has spent the largest amount of money been given the highest rating? 

102.List all customers in descending order of customer rating.
mysql> select cname,rating from customers order by cname desc;
+----------+--------+
| cname    | rating |
+----------+--------+
| Pereira  |    100 |
| Liu      |    200 |
| Hoffman  |    100 |
| Grass    |    300 |
| Giovanni |    200 |
| Clemens  |    100 |
| Cisneros |    300 |
+----------+--------+ 
103.On which days has Hoffman placed orders? 

mysql> select o.odate from customers c
    -> join orders o on c.cnum = o.cnum
    -> where c.cname ='hoffman';
+------------+
| odate      |
+------------+
| 1996-10-03 |
+------------+

104.Do all salespeople have different commissions? 
mysql> select(select count(distinct comm) from salespeople ) as distinct_comm_count,
    -> (select count(*) from salespeople) as total_salespeople_count;
+---------------------+-------------------------+
| distinct_comm_count | total_salespeople_count |
+---------------------+-------------------------+
|                   6 |                       6 |
+---------------------+-------------------------+

105.Which salespeople have no orders between 10/03/1996 and 10/05/1996?
mysql> select s.snum,s.sname
    -> from salespeople s
    -> where s.snum not in (
    -> select o.snum from orders o
    -> where o.odate between '1996-10-03' and '1996-10-05');
+------+-------+
| snum | sname |
+------+-------+
| 1005 | Fran  |
+------+-------+ 

106.How many salespersons have succeeded in getting orders? 
mysql> select count(distinct snum) as salesperson_count
    -> from orders;
+-------------------+
| salesperson_count |
+-------------------+
|                 5 |
+-------------------+

107.How many customers have placed orders? 
mysql> select count(distinct cnum) as customers_count
    -> from orders o;
+-----------------+
| customers_count |
+-----------------+
|               7 |
+-----------------+
108.On which date has each salesperson booked an order of maximum value? 
mysql> select snum,odate,amt
    -> from orders o
    -> where amt =(select max(amt) from orders where snum = o.snum)
    -> order by snum;
+------+------------+---------+
| snum | odate      | amt     |
+------+------------+---------+
| 1001 | 1996-10-06 | 9891.88 |
| 1002 | 1996-10-03 | 5160.45 |
| 1003 | 1996-10-04 | 1713.23 |
| 1004 | 1996-10-03 |  1900.1 |
| 1007 | 1996-10-03 | 1098.16 |
+------+------------+---------+

109.Who is the most successful salesperson? 
mysql> select s.sname,sum(o.amt) as total_sales
    -> from orders o
    -> join salespeople s on o.snum = s.snum
    -> group by  s.snum
    -> order by total_sales desc
    -> limit 1;
+-------+--------------------+
| sname | total_sales        |
+-------+--------------------+
| Peel  | 15382.069885253906 |
+-------+--------------------+
110.Who is the worst customer with respect to the company? 

111.Are all customers not having placed orders greater than 200 totally been serviced by 
salespersons Peel or Serres? 

112.Which customers have the same rating?
mysql> select c1.cnum,c1.cname,c1.rating
    -> from customers c1
    -> join customers c2 on c1.rating = c2.rating
    -> where c1.cnum < c2.cnum
    -> order by c1.rating;
+------+----------+--------+
| cnum | cname    | rating |
+------+----------+--------+
| 2001 | Hoffman  |    100 |
| 2001 | Hoffman  |    100 |
| 2006 | Clemens  |    100 |
| 2002 | Giovanni |    200 |
| 2004 | Grass    |    300 |
+------+----------+--------+

113.Find all orders greater than the average for October 4th. 

mysql> select o.onum,o.amt,o.odate
    -> from orders o
    -> where o.amt >(select avg(amt) from orders where odate ='1996-10-04');
+------+---------+------------+
| onum | amt     | odate      |
+------+---------+------------+
| 3002 |  1900.1 | 1996-10-03 |
| 3005 | 5160.45 | 1996-10-03 |
| 3006 | 1098.16 | 1996-10-03 |
| 3008 |    4723 | 1996-10-05 |
| 3009 | 1713.23 | 1996-10-04 |
| 3010 | 1309.95 | 1996-10-06 |
| 3011 | 9891.88 | 1996-10-06 |
+------+---------+------------+

114.Which customers have above average orders? 

mysql> select distinct c.cnum,c.cname
    -> from customers c
    -> join orders o on c.cnum = o.cnum
    -> where o.amt >(select avg(amt) from orders);
+------+---------+
| cnum | cname   |
+------+---------+
| 2003 | Liu     |
| 2006 | Clemens |
+------+---------+
115.List all customers with ratings above San Jose’s average.
mysql> select cname,rating from customers
    -> where rating > (select avg(rating) from customers where city ='san jose');
+----------+--------+
| cname    | rating |
+----------+--------+
| Grass    |    300 |
| Cisneros |    300 |
+----------+--------+ 
116.Select the total amount in orders for each salesperson for whom the total is greater than the 
amount of the largest order in the table. 

mysql> select s.snum,s.sname,sum(o.amt) as total_amount
    -> from salespeople s
    -> join orders o on s.snum = o.snum
    -> group by s.snum,s.sname
    -> having sum(o.amt) > (select max(amt) from orders);
+------+-------+--------------------+
| snum | sname | total_amount       |
+------+-------+--------------------+
| 1001 | Peel  | 15382.069885253906 |
+------+-------+--------------------+

117.Give names and numbers of all salespersons who have more than one customer. 
mysql> select  s.snum,s.sname
    -> from salespeople s
    -> join customers c on s.snum = c.snum
    -> group by s.snum,s.sname
    -> having count(c.cnum) > 1;
+------+--------+
| snum | sname  |
+------+--------+
| 1001 | Peel   |
| 1002 | Serres |
+------+--------+
118.Select all salespersons by name and number who have customers in their city whom they 
don’t service. 
mysql> select s.sname,s.snum,s.city from salespeople s
    -> join customers c on s.snum = c.snum
    -> where exists ( select 1 from customers c where c.city = s.city and c.snum <> s.snum);
+--------+------+----------+
| sname  | snum | city     |
+--------+------+----------+
| Serres | 1002 | San Jose |
| Serres | 1002 | San Jose |
| Motika | 1004 | London   |
+--------+------+----------+
119.Which customers’ rating  should be lowered? 
mysql> select c.cname, avg(o.amt) as avg_amt,c.rating from customers c inner join orders o on c.cnum = o.cnum
    -> group by c.cnum,c.cname,c.rating
    -> having avg(o.amt) <(select avg(amt) from orders) and c.rating > 100;
+----------+-------------------+--------+
| cname    | avg_amt           | rating |
+----------+-------------------+--------+
| Giovanni |  894.489990234375 |    200 |
| Grass    | 1309.949951171875 |    300 |
| Cisneros | 558.4250173568726 |    300 |
+----------+-------------------+--------+

120.Is there a case for assigning a salesperson to Berlin?
mysql> SELECT cname, city, rating
    -> FROM customers
    -> WHERE city = 'Berlin';
+-------+--------+--------+
| cname | city   | rating |
+-------+--------+--------+
| Grass | Berlin |    300 |
+-------+--------+--------+ 
121.Is there any evidence linking the performance of a salesperson to the commission that he or 
she is being paid? 
122.Does the total amount in orders by customer in Rome and London exceed the commission 
paid to salespersons in London and New York by more than 5 times? 
123.Which is the date, order number, amt and city for each salesperson (by name) for the 
maximum order he has obtained? 

124.Which salesperson(s) should be fired? 
mysql> SELECT s.snum, s.sname
    -> FROM salespeople s
    -> LEFT JOIN orders o ON s.snum = o.snum
    -> WHERE o.snum IS NULL;
+------+-------+
| snum | sname |
+------+-------+
| 1005 | Fran  |
+------+-------+
125.What is the total income for the company?
mysql> select sum(amt) as total_income from orders;
+--------------------+
| total_income       |
+--------------------+
| 26658.400022506714 |
+--------------------+


